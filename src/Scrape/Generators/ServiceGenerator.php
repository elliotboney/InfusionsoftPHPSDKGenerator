<?php 
namespace Scrape\Generators;
// use scrape\ISScraper;
// use Scrape\Service;
// use Scrape\ISHelpers;


class ServiceGenerator
{
    // setting this to true will output html files with style
    public $pretty = false;

    public $outdir = 'lib/Scrape/Output/Services/';
    public $servicename;
    public $url;
    public $methods;
    // file handle
    public $f;

    function __construct($svc) 
    {
        $this->servicename = $svc->name;
        $this->methods = $svc->methods;
        $this->url = $svc->url;
        // print_r($svc->methods);
        if (!is_dir($this->outdir)) 
            mkdir($this->outdir, 0777, true);
        if ($this->pretty) {
            $this->f = fopen($this->outdir . "" . $this->servicename . ".php.html", "w");
        } else {
            $this->f = fopen($this->outdir . "" . $this->servicename . ".php", "w");
        }
    }

    function generate() 
    {
        if ($this->pretty) {
            $this->fo("<!doctype html>\n<html>\n<head>\n");
            //$this->fo('<script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?lang=php&skin=desert" type="text/javascript"></script>');
            $this->fo('<link rel="stylesheet" href="http://yandex.st/highlightjs/7.3/styles/default.min.css">'."\n");
            $this->fo('<link rel="stylesheet" href="http://softwaremaniacs.org/media/soft/highlight/styles/solarized_dark.css">'."\n");
            $this->fo('<script src="http://yandex.st/highlightjs/7.3/highlight.min.js"></script>'."\n");
            $this->fo('<script>'."\n");
            $this->fo("hljs.tabReplace = '    ';\n");
            $this->fo('hljs.initHighlightingOnLoad();'."\n");
            $this->fo('</script>'."\n");
            $this->fo(
                "\n<style type=\"text/css\">\n" . 
                "    @import url(http://fonts.googleapis.com/css?family=Source+Code+Pro:200,300,400,700);\n" . 
                "    * { font-family: Source Code Pro; font-weight: 400; font-size: 11px; }\n" .
                "    body {\n background-color: rgb(0, 43, 54);\n }\n" .
                "    pre {\nmargin: 0;\n}\n" . 
                "</style>\n"
            );
            $this->fo("<title>" . $this->servicename . " | Autogenerated Class by Elliot</title>\n");
            $this->fo("</head>\n<body>\n");
            $this->fo("<pre class=\"prettyprint\">\n"); 
            $this->fo("<code class=\"language-php\">\n");            
        } else { $this->fo("<?php\n"); }
        $this->generateDocBlock();
        $this->fo("class " . $this->servicename . "\n{\n");
        
        $this->generateMethods();

        $this->fo("}\n");
        if ($this->pretty)
            $this->fo("\n</code></pre></body></html>");
        else
            $this->fo("?>\n");
    }

    function generateMethods()
    {
        foreach ($this->methods as $m) {
            // clean parameter types
            foreach ($m->parameters as $p) { 
                $p->type = str_replace(" (of strings)","",$p->type);
            }

            $this->fo("    /**\n");
            $this->fo("     * " . wordwrap($m->description,93,"\n     * ") . "\n");
            $this->fo("     *\n");
            // set variables for determining longest strings of param and type
            $longestparam = 0;
            $longesttype = 0;
            // Iterate through to find the longest length (needed for PHP Doc)
            foreach ($m->parameters as $p) { 
                if(strlen($p->name) > $longestparam)
                    $longestparam = strlen($p->name);
                if(strlen($p->type) > $longesttype)
                    $longesttype = strlen($p->type);
            }
            // figure out indent level of description
            $dscrindent = strlen("     * @param ")+$longesttype+$longestparam+3;
            // Write out all the parameters for docblock
            foreach ($m->parameters as $p) {              
                $this->fo(
                    "     * @param " . str_pad($p->type, $longesttype+1) 
                    . str_pad("$" . $p->name, $longestparam+2) . 
                    // wrap long descriptions
                    wordwrap($p->description, 100-$dscrindent, "\n     * ".str_repeat(" ",$dscrindent-7))
                    . "\n"
                );
            }
           // $this->fo(str_repeat(" ",strlen("     * @param ")+$longesttype+$longestparam+3)."TEST\n");
            // empty line required after all parameters
            $this->fo("     *\n");
            $this->fo("     * @return stuff\n"); 
            // $this->fo("     * @var " . $m->type . "\n");
            $this->fo("     */\n");
            $this->fo("    function " . $m->name . "(");
            $first = true;
            // Write out parameters into function declaration
            foreach ($m->parameters as $p) {
                if ($first) {
                    $this->fo("$" . $p->name);
                    $first = false;
                    continue;
                }
                $this->fo(", $" . $p->name);
            }
            $this->fo(")\n");
            // start function
            // $ci is the current indent level
            $ci= 1;
            $this->fo(str_repeat(" ", $ci*4) . "{\n");
            $ci= 2;
            $this->fo(str_repeat(" ", $ci*4).'$parray = array(' . "\n");
            $first = true;
            foreach ($m->parameters as $p) {
                $ci= 3;
                // if parameter is an int, we need to cast
                $caster = "";
                if ($p->type == "int")
                    $caster = "(int)";
                // if parameter is datetime or array, pass auto_dates to php_xmlrpc_encode
                $endcaster = "";
                if ($p->type == "dateTime" || $p->type == "array")
                    $endcaster = ", array('auto_dates')";
                if ($first) {
                    $this->fo(
                        str_repeat(" ", $ci*4) . "php_xmlrpc_encode(" . $caster . "$" . $p->name 
                        . $endcaster . ")"
                    );
                    $first = false;
                    continue;
                }
                $this->fo(
                    ",\n" . str_repeat(" ", $ci*4) . "php_xmlrpc_encode(" . $caster . "$" . $p->name
                    . $endcaster . ")"
                );
            }
            $this->fo(");\n");


            // Close up function
            $this->fo("    }\n\n");


        } // End Method Section
    }

    function generateDocBlock() 
    {
        
        $this->fo("/**\n");
        $this->fo(" * THIS CODE WAS GENERATED BY AN AUTOMATED TOOL. Editing it is not recommended.\n");
        $this->fo(" * For more information, see http://github.com/elliotboney/\n");
        $this->fo(" *\n");
        date_default_timezone_set('America/Chicago');
        $date = date_create();
        $this->fo(" * Generated on: " . date_format($date, 'm/d/Y @ H:i:s') . "\n");
        $this->fo(" *\n");
        $this->fo(" * MIT License\n");
        $this->fo(" * ===========\n");
        $this->fo(" * \n");
        $this->fo(" * Permission is hereby granted, free of charge, to any person obtaining a\n");
        $this->fo(" * copy of this software and associated documentation files (the \"Software\"),\n");
        $this->fo(" * to deal in the Software without restriction, including without limitation\n");
        $this->fo(" * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n");
        $this->fo(" * and/or sell copies of the Software, and to permit persons to whom the\n");
        $this->fo(" * Software is furnished to do so, subject to the following conditions:\n");
        $this->fo(" * \n");
        $this->fo(" * The above copyright notice and this permission notice shall be included in\n");
        $this->fo(" * all copies or substantial portions of the Software.\n");
        $this->fo(" * \n");
        $this->fo(" * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n");
        $this->fo(" * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n");
        $this->fo(" * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n");
        $this->fo(" * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n");
        $this->fo(" * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n");
        $this->fo(" * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n");
        $this->fo(" * DEALINGS IN THE SOFTWARE.\n");
        $this->fo(" *\n");
        $this->fo(" * @category  Services\n");
        $this->fo(" * @package   " . $this->servicename . "\n");
        $this->fo(" * @author    Elliot Boney <elliotboney@gmail.com>\n");
        $this->fo(" * @copyright 1997-2013 Digital Grove, LLC\n");
        $this->fo(" * @license   MIT License (http://www.opensource.org/licenses/mit-license.php)\n");
        $this->fo(" * @version   [0.0.1]\n");
        $this->fo(" * @link      http://help.infusionsoft.com/developers/services/" . $this->servicename . "\n");
        $this->fo(" */\n\n");
        $this->fo("namespace iSDK\Services;\n\n");
        $this->fo("/**\n");
        $this->fo(" * " . $this->servicename . " Service Class\n");
        $this->fo(" *\n");
        $this->fo(" * " . $this->servicename . " [short description]\n");
        $this->fo(" *\n");
        $this->fo(" * @category Services\n");
        $this->fo(" * @package  " . $this->servicename . "\n");
        $this->fo(" * @author   Elliot Boney <elliotboney@gmail.com>\n");
        $this->fo(" * @license  MIT License (http://www.opensource.org/licenses/mit-license.php)\n");
        $this->fo(" * @link     " . $this->url . "\n");
        $this->fo(" */\n");
    }

    function fo($s)
    {
        fwrite($this->f, $s);
    }

    function __destruct()
    {
        fclose($this->f);
    }
}

?>