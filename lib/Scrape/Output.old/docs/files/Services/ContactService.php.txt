<?php
/**
 * THIS CODE WAS GENERATED BY AN AUTOMATED TOOL. Editing it is not recommended.
 * For more information, see http://github.com/elliotboney/
 *
 * Generated on: 09/26/2013 @ 20:31:09
 *
 * MIT License
 * ===========
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * @category  Services
 * @package   ContactService
 * @author    Elliot Boney <elliotboney@gmail.com>
 * @copyright 1997-2013 Digital Grove, LLC
 * @license   MIT License (http://www.opensource.org/licenses/mit-license.php)
 * @version   [0.0.1]
 * @link      http://help.infusionsoft.com/developers/services/ContactService
 */

namespace iSDK\Services;

/**
 * ContactService Service Class
 *
 * ContactService [short description]
 *
 * @category Services
 * @package  ContactService
 * @author   Elliot Boney <elliotboney@gmail.com>
 * @license  MIT License (http://www.opensource.org/licenses/mit-license.php)
 * @link     http://help.infusionsoft.com//api-docs/contactservice
 */
class ContactService
{
    /**
     * Creates a new contact record from the data passed in the associative array
     *
     * @param array $data an associative array of the data for this new contact record. The array
     *                    key is the field name to store the value within
     *
     * @return stuff
     */
    function add($data)
    {
        $parray = array(
            php_xmlrpc_encode($data, array('auto_dates')));
    }

    /**
     * Merge two contacts together
     *
     * @param int $contactId          the contact Id number you want to merge
     * @param int $duplicateContactId the Id of the duplicate contact you would like to merge
     *
     * @return stuff
     */
    function merge($contactId, $duplicateContactId)
    {
        $parray = array(
            php_xmlrpc_encode((int)$contactId),
            php_xmlrpc_encode((int)$duplicateContactId));
    }

    /**
     * Adds a contact to a follow-up sequence (campaigns were the original name of follow-up
     * sequences)
     *
     * @param int $contactId  the contact Id number you would like to start the follow-up sequence
     *                        for
     * @param int $campaignId the Id number of the follow-up sequence you would like to start
     *
     * @return stuff
     */
    function addToCampaign($contactId, $campaignId)
    {
        $parray = array(
            php_xmlrpc_encode((int)$contactId),
            php_xmlrpc_encode((int)$campaignId));
    }

    /**
     * Adds a tag to a contact record
     *
     * @param int $contactId the contact Id number you would like to add to a group
     * @param int $groupId   the Id number of the group you wish to add the contact to
     *
     * @return stuff
     */
    function addToGroup($contactId, $groupId)
    {
        $parray = array(
            php_xmlrpc_encode((int)$contactId),
            php_xmlrpc_encode((int)$groupId));
    }

    /**
     * Returns the Id number of the next follow-up sequence step for the given contact
     *
     * @param int $contactId          the Id number of the contact record you would like to get the
     *                                next sequence step for
     * @param int $followUpSequenceId the follow-up sequence Id number you would like to get the
     *                                next step for the given contact
     *
     * @return stuff
     */
    function getNextCampaignStep($contactId, $followUpSequenceId)
    {
        $parray = array(
            php_xmlrpc_encode((int)$contactId),
            php_xmlrpc_encode((int)$followUpSequenceId));
    }

    /**
     * Finds all contacts with the given email address. This searches the Email, Email 2, and Email
     * 3 fields
     *
     * @param string $email          The email address to search contacts by
     * @param array  $selectedFields The contact fields you would like returned
     *
     * @return stuff
     */
    function findByEmail($email, $selectedFields)
    {
        $parray = array(
            php_xmlrpc_encode($email),
            php_xmlrpc_encode($selectedFields, array('auto_dates')));
    }

    /**
     * Load data from a specific contact record
     *
     * @param int   $contactId      The Id number of the contact you would like to load data from
     * @param array $selectedFields An array of strings where each string is the database field name
     *                              of the field you would like sent back
     *
     * @return stuff
     */
    function load($contactId, $selectedFields)
    {
        $parray = array(
            php_xmlrpc_encode((int)$contactId),
            php_xmlrpc_encode($selectedFields, array('auto_dates')));
    }

    /**
     * Pauses a follow-up sequence for the given contact record
     *
     * @param int $contactId  The Id number of the contact record you are pausing the sequence on
     * @param int $sequenceId The follow-up sequence Id number
     *
     * @return stuff
     */
    function pauseCampaign($contactId, $sequenceId)
    {
        $parray = array(
            php_xmlrpc_encode((int)$contactId),
            php_xmlrpc_encode((int)$sequenceId));
    }

    /**
     * Removes a follow-up sequence from a contact record
     *
     * @param int $contactId          The Id number of the contact you want to remove the sequence
     *                                from
     * @param int $followUpSequenceId The Id number of the sequence you would like to remove the
     *                                contact from
     *
     * @return stuff
     */
    function removeFromCampaign($contactId, $followUpSequenceId)
    {
        $parray = array(
            php_xmlrpc_encode((int)$contactId),
            php_xmlrpc_encode((int)$followUpSequenceId));
    }

    /**
     * Removes a tag from a contact (groups were the original name of tags)
     *
     * @param int $contactId The Id number of the contact you would like to remove the tag from
     * @param int $TagId     The tag Id number. This is found on the Setup-&gt;Tags menu
     *
     * @return stuff
     */
    function removeFromGroup($contactId, $TagId)
    {
        $parray = array(
            php_xmlrpc_encode((int)$contactId),
            php_xmlrpc_encode((int)$TagId));
    }

    /**
     * Resumes a follow-up sequence that has been stopped/paused for a given contact
     *
     * @param int $contactId The Id number of the contact you would like to remove the tag from
     * @param int $seqId     The follow-up sequence Id number
     *
     * @return stuff
     */
    function resumeCampaignForContact($contactId, $seqId)
    {
        $parray = array(
            php_xmlrpc_encode((int)$contactId),
            php_xmlrpc_encode((int)$seqId));
    }

    /**
     * Immediately performs the given follow-up sequence stepId for the given contacts
     *
     * @param array $contactIds     An array of contact Id numbers you would like to reschedule the
     *                              step for
     * @param int   $sequenceStepId The Id number of the particular sequence step you would like to
     *                              reschedule
     *
     * @return stuff
     */
    function rescheduleCampaignStep($contactIds, $sequenceStepId)
    {
        $parray = array(
            php_xmlrpc_encode($contactIds, array('auto_dates')),
            php_xmlrpc_encode((int)$sequenceStepId));
    }

    /**
     * Removes a tag from a contact (groups were the original name of tags)
     *
     * @param int $contactId The Id number of the contact you would like to remove the tag from
     * @param int $tagId     The tag Id number. This is found on the Setup-&gt;Tags menu
     *
     * @return stuff
     */
    function removeFromGroup($contactId, $tagId)
    {
        $parray = array(
            php_xmlrpc_encode((int)$contactId),
            php_xmlrpc_encode((int)$tagId));
    }

    /**
     * Runs an action set on a given contact record
     *
     * @param int $contactId   The Id number of the contact record you want to run the action set on
     * @param int $actionSetId The Id number of the action set you would like to run. This is found
     *                         on the Setup-&gt;Action sets menu
     *
     * @return stuff
     */
    function runActionSequence($contactId, $actionSetId)
    {
        $parray = array(
            php_xmlrpc_encode((int)$contactId),
            php_xmlrpc_encode((int)$actionSetId));
    }

    /**
     * Adds or updates a contact record based on matching data
     *
     * @param array  $data         An associative array of the data for this new contact record. The
     *                             array key is the field name to store the value within
     * @param string $dupCheckType Determines how to consider a duplicate record. Options:
     *                             &#39;Email&#39;, &#39;EmailAndName&#39;,
     *                             &#39;EmailAndNameAndCompany&#39;
     *
     * @return stuff
     */
    function addWithDupCheck($data, $dupCheckType)
    {
        $parray = array(
            php_xmlrpc_encode($data, array('auto_dates')),
            php_xmlrpc_encode($dupCheckType));
    }

    /**
     * Updates the data on a contact record
     *
     * @param int   $contactId The Id number of the contact you wish to update
     * @param array $data      An associate array of the data for this contact. The array key needs
     *                         to be the field name in which you store the value
     *
     * @return stuff
     */
    function update($contactId, $data)
    {
        $parray = array(
            php_xmlrpc_encode((int)$contactId),
            php_xmlrpc_encode($data, array('auto_dates')));
    }

}
?>

