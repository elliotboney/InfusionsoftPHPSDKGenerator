<?php
/**
 * THIS CODE WAS GENERATED BY AN AUTOMATED TOOL. Editing it is not recommended.
 * For more information, see http://github.com/elliotboney/
 *
 * Generated on: 04/09/2014 @ 15:12:45
 *
 * MIT License
 * ===========
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * @category  Services
 * @package   InvoiceService
 * @author    Elliot Boney <elliotboney@gmail.com>
 * @copyright 1997-2013 Digital Grove, LLC
 * @license   MIT License (http://www.opensource.org/licenses/mit-license.php)
 * @version   [0.0.1]
 * @link      http://help.infusionsoft.com/developers/services/InvoiceService
 */

namespace iSDK\Services;

/**
 * InvoiceService Service Class
 *
 * InvoiceService [short description]
 *
 * @category Services
 * @package  InvoiceService
 * @author   Elliot Boney <elliotboney@gmail.com>
 * @license  MIT License (http://www.opensource.org/licenses/mit-license.php)
 * @link     http://help.infusionsoft.com//api-docs/invoiceservice
 */
class InvoiceService
{
    /**
     * Creates a one-time order with no added line items
     *
     * @param int      $contactId       The Id number of the contact record this order will be
     *                                  connected to
     * @param string   $description     The name this order will display. This is also the hyperlink
     *                                  to the order found on the contact&#39;s order tab
     * @param dateTime $orderDate       Date of order
     * @param int      $leadAffiliateId The Id number of the affiliate you would like placed as the
     *                                  lead affiliate. 0 if no affiliate should be attached
     * @param int      $saleAffiliateId The Id number of the affiliate you would like placed as the
     *                                  sale affiliate. 0 if no affiliate should be attached
     *
     * @return stuff
     */
    function createBlankOrder($contactId, $description, $orderDate, $leadAffiliateId, $saleAffiliateId)
    {
        $parray = array(
            php_xmlrpc_encode((int)$contactId),
            php_xmlrpc_encode($description),
            php_xmlrpc_encode($orderDate, array('auto_dates')),
            php_xmlrpc_encode((int)$leadAffiliateId),
            php_xmlrpc_encode((int)$saleAffiliateId));
    }

    /**
     * Adds a line item to an order. This used to add a Product to an order as well as any other
     * sort of charge/discount.
     *
     * @param int    $invoiceId   The Id number of the invoice this item is being added to
     * @param int    $productId   The Id number of the product you are adding. If you are adding
     *                            something such as tax, shipping, or a discount, make this 0
     * @param int    $type        The line item type - defined in the table below
     * @param double $price       The price of this line item.
     * @param int    $quantity    The quantity of item added
     * @param string $description The short description of this line item
     * @param string $notes       A full description for this line item
     *
     * @return stuff
     */
    function addOrderItem($invoiceId, $productId, $type, $price, $quantity, $description, $notes)
    {
        $parray = array(
            php_xmlrpc_encode((int)$invoiceId),
            php_xmlrpc_encode((int)$productId),
            php_xmlrpc_encode((int)$type),
            php_xmlrpc_encode($price),
            php_xmlrpc_encode((int)$quantity),
            php_xmlrpc_encode($description),
            php_xmlrpc_encode($notes));
    }

    /**
     * This will cause a credit card to be charged for the amount currently due on an invoice
     *
     * @param int     $invoiceId         The Invoice Id you would like to charge the balance due on
     * @param string  $notes             A note about the payment. Ex: &quot;API Upsell
     *                                   Payment&quot;
     * @param int     $creditCardId      The Id number of the credit card being charged
     * @param int     $merchantAccountId The Id number of the merchant account the payment is to
     *                                   process through
     * @param boolean $bypassCommissions A boolean telling the system if this payment should count
     *                                   towards affiliate commissions earned. This is almost always
     *                                   false.
     *
     * @return stuff
     */
    function chargeInvoice($invoiceId, $notes, $creditCardId, $merchantAccountId, $bypassCommissions)
    {
        $parray = array(
            php_xmlrpc_encode((int)$invoiceId),
            php_xmlrpc_encode($notes),
            php_xmlrpc_encode((int)$creditCardId),
            php_xmlrpc_encode((int)$merchantAccountId),
            php_xmlrpc_encode($bypassCommissions));
    }

    /**
     * Deletes the specified subscription from the database, as well as all invoices tied to the
     * subscription
     *
     * @param int $recurringOrderId The Id number of the particular subscription being deleted
     *
     * @return stuff
     */
    function deleteSubscription($recurringOrderId)
    {
        $parray = array(
            php_xmlrpc_encode((int)$recurringOrderId));
    }

    /**
     * This method is used when you would like to delete an order (not a subscription). You pass in
     * the invoice for this particular order, and the method handles deleting the invoice as well as
     * the order (Job table) tied to the invoice.
     *
     * @param int $invoiceId The Id of the invoice
     *
     * @return stuff
     */
    function deleteInvoice($invoiceId)
    {
        $parray = array(
            php_xmlrpc_encode((int)$invoiceId));
    }

    /**
     * Creates a subscription for a contact. Subscriptions are billing automatically by Infusionsoft
     * within the next six hours. If you want to bill immediately you will need to utilize the
     * InvoiceService.createInvoiceForRecurring and InvoiceService.chargeInvoice methods to
     * accomplish this.
     *
     * @param int     $contactId         The Id number of the contact this subscription will be
     *                                   connected with
     * @param boolean $allowDuplicate    If duplicate subscriptions should be allowed
     * @param int     $cProgramId        The Id number of the subscription you are adding. This is
     *                                   from the cProgram table
     * @param int     $qty               Quantity of this service/product price - price charged per
     *                                   quantity
     * @param double  $price             Price to charge for the subscription
     * @param boolean $taxable           If tax should be charged on this subscription
     * @param int     $merchantAccountId The merchant account this subscription will bill through
     * @param int     $creditCardId      The Id of the credit card this subscription will charge to
     * @param int     $affiliateId       The Id number for the affiliate being placed as the sale
     *                                   affiliate. 0 if no affiliate
     * @param int     $daysTillCharge    The number of days until this subscription should be
     *                                   charged. Essentially free trial days
     *
     * @return stuff
     */
    function addRecurringOrder($contactId, $allowDuplicate, $cProgramId, $qty, $price, $taxable, $merchantAccountId, $creditCardId, $affiliateId, $daysTillCharge)
    {
        $parray = array(
            php_xmlrpc_encode((int)$contactId),
            php_xmlrpc_encode($allowDuplicate),
            php_xmlrpc_encode((int)$cProgramId),
            php_xmlrpc_encode((int)$qty),
            php_xmlrpc_encode($price),
            php_xmlrpc_encode($taxable),
            php_xmlrpc_encode((int)$merchantAccountId),
            php_xmlrpc_encode((int)$creditCardId),
            php_xmlrpc_encode((int)$affiliateId),
            php_xmlrpc_encode((int)$daysTillCharge));
    }

    /**
     * Modifies the commissions being earned on a particular subscription. This does not affect
     * previously generated invoices for this subscription.
     *
     * @param int    $recurringOrderId The Id number of the recurringOrder(subscription record) this
     *                                 override is being applied to
     * @param int    $affiliateId      The Id of the affiliate earning this commission
     * @param double $amount           The commission amount being earned
     * @param int    $payoutType       How the commissions will be earned. 4 - up front earning, 5 -
     *                                 upon customer payment. Typically this is 5
     * @param string $description      A short note about this commission override.
     *
     * @return stuff
     */
    function addRecurringCommissionOverride($recurringOrderId, $affiliateId, $amount, $payoutType, $description)
    {
        $parray = array(
            php_xmlrpc_encode((int)$recurringOrderId),
            php_xmlrpc_encode((int)$affiliateId),
            php_xmlrpc_encode($amount),
            php_xmlrpc_encode((int)$payoutType),
            php_xmlrpc_encode($description));
    }

    /**
     * This will create an invoice for all charges due on a Subscription. If the subscription has
     * three billing cycles that are due, it will create one invoice with all three items attached.
     *
     * @param int $recurringOrderId The Id number for the particular subscription you want invoiced
     *
     * @return stuff
     */
    function createInvoiceForRecurring($recurringOrderId)
    {
        $parray = array(
            php_xmlrpc_encode((int)$recurringOrderId));
    }

    /**
     * Adds a payment to an invoice without actually processing a charge through a merchant. This is
     * useful if you accept cash/check, or handle payments outside of Infusionsoft.
     *
     * @param int      $invoiceId          The Id of invoice being paid
     * @param double   $amt                The amount of this payment
     * @param dateTime $paymentDate        Date of payment
     * @param string   $paymentType        Cash, Check, Credit Card, Money Order, PayPal, etc.
     * @param string   $paymentDescription An area useful for noting payment details such as a check
     *                                     number
     * @param boolean  $bypassCommissions  A boolean which tells the system if this payment should
     *                                     count towards what the affiliate has earned. This is
     *                                     almost always false.
     *
     * @return stuff
     */
    function addManualPayment($invoiceId, $amt, $paymentDate, $paymentType, $paymentDescription, $bypassCommissions)
    {
        $parray = array(
            php_xmlrpc_encode((int)$invoiceId),
            php_xmlrpc_encode($amt),
            php_xmlrpc_encode($paymentDate, array('auto_dates')),
            php_xmlrpc_encode($paymentType),
            php_xmlrpc_encode($paymentDescription),
            php_xmlrpc_encode($bypassCommissions));
    }

    /**
     * Allows you to setup a custom payment plan for an invoice.
     *
     * @param int      $invoiceId         The Id of the invoice this payment plan is fo
     * @param boolean  $autoCharge        If the auto-charge for this pay plan should be enabled or
     *                                    disabled
     * @param int      $creditCardId      Credit card being charged for this pay plan
     * @param int      $merchantAccountId Merchant account this pay plan will charge through
     * @param int      $daysBetweenRetry  The number of days Infusionsoft should wait before
     *                                    re-attempting to charge a failed payment
     * @param int      $maxRetry          The maximum number of times Infusionsoft should retry a
     *                                    failed payment
     * @param double   $initialPmtAmt     The amount of the very first charge on this payment plan
     * @param dateTime $initialPmtDate    The date the first payment should occur
     * @param dateTime $planStartDate     The date the second payment should occur for the payment
     *                                    plan
     * @param int      $numPmts           The number of payments in this payment plan. This does not
     *                                    include the original/first payment
     * @param int      $daysBetweenPmts   The number of days between payments in this payment plan.
     *                                    This first time this comes into play will be between the
     *                                    second and third payments
     *
     * @return stuff
     */
    function addPaymentPlan($invoiceId, $autoCharge, $creditCardId, $merchantAccountId, $daysBetweenRetry, $maxRetry, $initialPmtAmt, $initialPmtDate, $planStartDate, $numPmts, $daysBetweenPmts)
    {
        $parray = array(
            php_xmlrpc_encode((int)$invoiceId),
            php_xmlrpc_encode($autoCharge),
            php_xmlrpc_encode((int)$creditCardId),
            php_xmlrpc_encode((int)$merchantAccountId),
            php_xmlrpc_encode((int)$daysBetweenRetry),
            php_xmlrpc_encode((int)$maxRetry),
            php_xmlrpc_encode($initialPmtAmt),
            php_xmlrpc_encode($initialPmtDate, array('auto_dates')),
            php_xmlrpc_encode($planStartDate, array('auto_dates')),
            php_xmlrpc_encode((int)$numPmts),
            php_xmlrpc_encode((int)$daysBetweenPmts));
    }

    /**
     * Used to determine the outstanding amount owed on a given invoice.
     *
     * @param int $invoiceId The invoice Id number you would like amount owed for
     *
     * @return stuff
     */
    function calculateAmountOwed($invoiceId)
    {
        $parray = array(
            php_xmlrpc_encode((int)$invoiceId));
    }

    /**
     * Used to determine the outstanding amount owed on a given invoice.
     *
     * @param int $invoiceId The invoice Id number you would like amount owed for
     *
     * @return stuff
     */
    function calculateAmountOwed($invoiceId)
    {
        $parray = array(
            php_xmlrpc_encode((int)$invoiceId));
    }

    /**
     * This is used to retrieve all Payment Types currently setup under the Order Settings section
     * of Infusionsoft.
     *
     *
     * @return stuff
     */
    function getAllPaymentOptions()
    {
        $parray = array(
);
    }

    /**
     * Retrieves all payments for a given invoice.
     *
     * @param int $invoiceId The Id of the invoice you would like payments for.
     *
     * @return stuff
     */
    function getPayments($invoiceId)
    {
        $parray = array(
            php_xmlrpc_encode((int)$invoiceId));
    }

    /**
     * Finds a credit card on file for a contactId that matches the last four digits of the card.
     *
     * @param int    $contactId The contact Id number for which you would like to find the credit
     *                          card for
     * @param string $last4     The last 4 digits of the card you need the Id number for
     *
     * @return stuff
     */
    function locateExistingCard($contactId, $last4)
    {
        $parray = array(
            php_xmlrpc_encode((int)$contactId),
            php_xmlrpc_encode($last4));
    }

    /**
     * Calculates tax, and places it onto the given invoice.
     *
     * @param int $invoiceId The id of the invoice you want to calculate tax on
     *
     * @return stuff
     */
    function recalculateTax($invoiceId)
    {
        $parray = array(
            php_xmlrpc_encode((int)$invoiceId));
    }

    /**
     * Validates a credit card in one of two ways - the first will validate an existing card in the
     * Infusionsoft system by grabbing card data via the credit card ID. The second takes card
     * details as a struct and validates it without having it already saved.
     *
     * @param int $creditCardId The Infusionsoft ID number of an existing credit card
     *
     * @return stuff
     */
    function validateCreditCard($creditCardId)
    {
        $parray = array(
            php_xmlrpc_encode((int)$creditCardId));
    }

    /**
     * Retrieves the shipping options currently setup for the Infusionsoft shopping cart.
     *
     *
     * @return stuff
     */
    function getAllShippingOptions()
    {
        $parray = array(
);
    }

    /**
     * Changes the next bill date on a subscription.
     *
     * @param int  $recurringOrderId The Id number of the subscription you would like to update.
     *                               retrieved from the RecurringOrder table.
     * @param date $nextBillDate     The next billing date the subscription is being set to.
     *
     * @return stuff
     */
    function updateJobRecurringNextBillDate($recurringOrderId, $nextBillDate)
    {
        $parray = array(
            php_xmlrpc_encode((int)$recurringOrderId),
            php_xmlrpc_encode($nextBillDate));
    }

    /**
     * Creates a commission on an existing invoice.
     *
     * @param int    $invoiceId   The Id number of the invoice to create a commission on
     * @param int    $affiliateId The Id number of the affiliate the commission is for
     * @param int    $productId   The Id number of the product this commission is for
     * @param int    $percentage  The percentage paid for the product being sold
     * @param double $amount      Amount of commission being paid for the product sold
     * @param int    $payoutType  How the commission should be earned - 4 if paid up front in full,
     *                            5 if earned upon customer payment
     * @param string $description A note about this commission
     * @param date   $date        Date the commission was generated, not necessarily earned (unless
     *                            paid up front in full)
     *
     * @return stuff
     */
    function addOrderCommissionOverride($invoiceId, $affiliateId, $productId, $percentage, $amount, $payoutType, $description, $date)
    {
        $parray = array(
            php_xmlrpc_encode((int)$invoiceId),
            php_xmlrpc_encode((int)$affiliateId),
            php_xmlrpc_encode((int)$productId),
            php_xmlrpc_encode((int)$percentage),
            php_xmlrpc_encode($amount),
            php_xmlrpc_encode((int)$payoutType),
            php_xmlrpc_encode($description),
            php_xmlrpc_encode($date));
    }

}
?>
